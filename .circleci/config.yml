---
version: 2.1

# Used Orbs (https://circleci.com/docs/2.0/using-orbs/)
orbs:
  ruby: circleci/ruby@2.1
  sonarcloud: sonarsource/sonarcloud@2.0
  asdf: rynkowsg/asdf@0.1
  codecov: codecov/codecov@4.1
  gcr: circleci/gcp-gcr@0.16
  github: circleci/github-cli@2.3

# Pipeline parameters
parameters:
  # The main branch of the repository (e.g. main)
  main-branch:
    type: string
    default: main
  default-ruby:
    type: string
    default: "3.3.3"

# Define common YAML anchors
x-common-auth: &common-auth
  auth:
    username: ${DOCKERHUB_USER}
    password: ${DOCKERHUB_PASSWORD}

# Define executors
executors:
  docker:  # Docker using the Base Convenience Image
    docker:
      - image: cimg/base:stable
        <<: *common-auth
  macos:  # macOS executor running Xcode
    macos:
      # https://circleci.com/developer/machine/image/xcode
      xcode: 15.4.0

jobs:
  # Lint Job
  lint:
    docker:
      - image: cimg/base:stable
        <<: *common-auth
    resource_class: small
    steps:
      # Check out code
      - checkout
      # Install requested Ruby version
      - ruby/install:
          version: "<< pipeline.parameters.default-ruby >>"
      # Install dependencies using bundler
      - ruby/install-deps:
          pre-install-steps:
            - run: bundle config set jobs $(nproc)
          key: gems-v{{ .Environment.CACHE_VERSION }}
      # Run Rubocop
      - run:
          name: Run Rubocop
          command: |
            bash -c "bundle exec rubocop --format=json --out=rubocop-result.json; [[ \$? -ne 2 ]]"
      - store_artifacts:
          path: rubocop-result.json
          destination: rubocop-result.json
      - persist_to_workspace:
          root: .
          paths:
            - rubocop-result.json

  # Test Job
  test:
    parameters:
      # The OS to run the jobs on
      os:
        type: string
        default: docker
      # The OS to run the jobs on
      ruby-version:
        type: string
        default: "3.3.3"
    executor: << parameters.os >>
    environment:
      RUBY_VERSION: << parameters.ruby-version >>
    steps:
      # Install dependencies based on the OS
      - when:
          condition:
            equal: ["docker", "<< parameters.os >>"]
          steps:
            - run:
                name: Install ImageMagick, libvips and libffi
                command: |
                  sudo apt-get update
                  sudo apt-get -y --no-install-recommends install openssl imagemagick \
                    libvips42 libffi-dev libreadline-dev libtool libyaml-dev
            - asdf/install
      - when:
          condition:
            equal: ["macos", "<< parameters.os >>"]
          steps:
            - run:
                name: Install ImageMagick, libvips and libffi
                command: |
                  brew install openssl@3 imagemagick vips asdf libffi
      # Install requested Ruby version
      - run:
          name: Install Ruby << parameters.ruby-version >>
          command: |
            asdf plugin-add ruby
            asdf install ruby << parameters.ruby-version >>
            asdf global ruby << parameters.ruby-version >>
            gem install --user-install executable-hooks
      # Check out code
      - checkout
      # Install dependencies using bundler
      - ruby/install-deps:
          pre-install-steps:
            - run: bundle config set jobs $(nproc)
          key: gems-v{{ .Environment.CACHE_VERSION }}
      # Run RSpec tests
      - run:
          name: Run tests
          command: |
            bundle exec rspec spec
      # Run appraisals
      - run:
          name: Run appraisals
          command: |
            bundle exec appraisal install --jobs=$(nproc) --retry 3
            bundle exec appraisal rspec
      # Store test results
      - store_test_results:
          path: rspec/rspec.xml
      # Persist test results to workspace and upload to CodeCov for default Ruby
      - when:
          condition:
            and:
              - equal: ["docker", "<< parameters.os >>"]
              - equal: ["<< pipeline.parameters.default-ruby >>", "<< parameters.ruby-version >>"]
          steps:
            - persist_to_workspace:
                root: .
                paths:
                  - rspec
                  - coverage
            - codecov/upload

  # Sonarcloud Job
  sonarcloud:
    docker:
      - image: cimg/openjdk:21.0-node
        <<: *common-auth
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Replace Version
          command: |
            if [ -n "${CIRCLE_TAG}" ] && [ ! -z "${CIRCLE_TAG}" ] ; then
              export APP_VERSION="${CIRCLE_TAG}"
            elif [ -n "${CIRCLE_BRANCH}" ] && [ ! -z "${CIRCLE_BRANCH}" ] ; then
              export APP_VERSION="${CIRCLE_BRANCH}"
            else
              export APP_VERSION="${CIRCLE_SHA1:0:7}"
            fi
            echo "Setting version to ${APP_VERSION}"
            sed -i -e "s\\sonar.projectVersion=.*$\\sonar.projectVersion=${APP_VERSION}\\g" sonar-project.properties
      - sonarcloud/scan

  # Release Job
  release:
    docker:
      - image: cimg/base:stable
        <<: *common-auth
    resource_class: small
    environment:
      GIT_MAIN_BRANCH: << pipeline.parameters.main-branch >>
      CHANGELOG_FILENAME: CHANGELOG.md
    steps:
      - setup_remote_docker
      - checkout
      - attach_workspace:
          at: .
      - github/install:
          version: 2.47.0
      - gcr/gcr-auth
      - run:
          name: Build and push gem
          command: |
            bundle exec rake version["${CIRCLE_TAG}"]
            bundle exec gem build --strict
            GEM_HOST_API_KEY="${REMOVE_BG_GEM_PUSH_KEY}" gem push "remove_bg-${CIRCLE_TAG}.gem"

            # Update version to next beta version
            NEXT_PATCH_TAG=$(echo "${CIRCLE_TAG:-0.0.0}" | awk 'BEGIN{FS=OFS="."} {$3+=1} 1')
            BETA_TAG="${NEXT_PATCH_TAG}.pre"
            bundle exec rake version["${BETA_TAG}"]
      - run:
          name: Edit Release
          command: |
            # Update release
            docker run --rm -it --name=gren -v $(pwd)/.grenrc.json:/.grenrc.json \
              eu.gcr.io/removebg-226919/github-release-notes:latest \
              release --tags "${CIRCLE_TAG}" --override --token ${GITHUB_AUTH_TOKEN} --username ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME}

            # Get current release description
            gh release view ${CIRCLE_TAG} --repo ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} --json body --jq '.body' > release-body.txt

            # Append to release description
            echo "Updating release description"
            gh release edit ${CIRCLE_TAG} --repo ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} --notes-file release-body.txt --latest --title ${CIRCLE_TAG}
      - run:
          name: Generate CHANGELOG.md
          command: |
            # Configure git
            git config --global credential.helper cache
            git config --global user.email "${GITHUB_USER_EMAIL}"
            git config --global user.name "${GITHUB_USER_NAME}"

            # Check out main branch
            git checkout --force "${GIT_MAIN_BRANCH}"

            # Generate changelog
            docker run -it --name=gren -v $(pwd)/.grenrc.json:/.grenrc.json \
              eu.gcr.io/removebg-226919/github-release-notes:latest \
              changelog --override --token ${GITHUB_AUTH_TOKEN} --username ${CIRCLE_PROJECT_USERNAME} --repo ${CIRCLE_PROJECT_REPONAME}

            docker cp "gren:/${CHANGELOG_FILENAME}" "${CHANGELOG_FILENAME}"
            docker rm gren

            # Remove Windows line endings
            sed -i $'s/\r$//' "${CHANGELOG_FILENAME}"

            # Commit changelog and bumped version to git
            git add "${CHANGELOG_FILENAME}"
            git add lib/remove_bg/version.rb
            git add Gemfile.lock
            git commit -m "üìù Update ${CHANGELOG_FILENAME} for ${CIRCLE_TAG}" -m "[skip ci]"
            git push -q --set-upstream origin ${GIT_MAIN_BRANCH}

################################################################################

workflows:
  multiple-rubies:
    jobs:
      # Test Job
      - test:
          context:
            - DockerHub
          matrix:
            parameters:
              os: ["docker", "macos"]
              ruby-version: ["3.1.6", "3.2.3", "3.3.3"]
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/

      # Lint Job
      - lint:
          context:
            - DockerHub
          requires:
            - test
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/

      # Sonarcloud Job
      - sonarcloud:
          context:
            - DockerHub
            - SonarCloud
          requires:
            - lint
            - test
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/

      # Release Job
      - release:
          context:
            - DockerHub
            - rubygems.org
            - Google Cloud kaleido
          requires:
            - lint
            - test
            - sonarcloud
          filters:
            tags:
              only: /^\d+\.\d+\.\d+$/
            branches:
              ignore: /^.*$/
